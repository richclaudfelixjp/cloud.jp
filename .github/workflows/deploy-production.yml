# cloud.jp ポートフォリオサイト - 本番環境デプロイワークフロー
# 目的: masterブランチの変更を本番環境 (cloudjp.netlify.app) に自動デプロイ
# Netlify Webhookを使用したゼロダウンタイムデプロイメント
name: Deploy to Production

# トリガー条件
on:
  push:
    branches: [master]  # masterブランチへの直接プッシュ時
  workflow_dispatch:    # 手動実行 (緊急デプロイ用)

# GitHub権限設定: セキュリティを考慮した最小権限の原則
permissions:
  contents: read      # リポジトリ内容の読み取り
  deployments: write  # デプロイメント記録の作成
  statuses: write     # コミットステータスの更新
  issues: write       # デプロイ記録用イシューの作成

jobs:
  deploy-production:
    name: 本番環境デプロイ
    runs-on: ubuntu-latest
    environment: production  # 本番環境保護設定を適用
    
    steps:
      # デプロイ開始ログ記録
      # 自動・手動デプロイの判別とトレーサビリティ確保
      - name: デプロイ条件検証
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "✅ Master branchへのマージにより自動デプロイを開始"
          else
            echo "✅ 手動デプロイが要求されました"
          fi
          echo "⏰ デプロイ開始: $(date -u '+%Y-%m-%d %H:%M:%S') UTC"

      # Netlify本番環境へのデプロイ実行
      # WebhookトリガーによるNetlifyのビルド&デプロイ開始
      - name: Netlify本番環境にデプロイ
        id: deploy
        run: |
          DEPLOY_RESULT=$(curl -X POST -d {} "${{ secrets.NETLIFY_PROD_HOOK_URL }}" -s)
          echo "deploy_id=$(date +%s)" >> $GITHUB_OUTPUT  # デプロイIDを一意生成
          echo "🚀 本番環境へのデプロイを開始"
          
      # デプロイ完了の確認とヘルスチェック
      # Netlifyのビルド時間を考慮した待機とサイト稼働確認
      - name: デプロイ完了待機
        id: verify
        run: |
          echo "⏳ デプロイ完了を待機中..."
          sleep 45  # Netlifyビルド時間を考慮した初期待機
          
          MAX_ATTEMPTS=12    # 最大試行回数 (合計2分間)
          ATTEMPT=1
          SITE_URL="https://cloudjp.netlify.app"  # 本番サイトURL
          
          # サイトの稼働確認ループ
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            if curl -f -s "$SITE_URL" > /dev/null; then
              echo "✅ 本番サイトが稼働中!"
              echo "status=success" >> $GITHUB_OUTPUT
              break
            fi
            
            echo "⏳ 試行 $ATTEMPT: サイト準備中、待機中..."
            
            # 最大試行回数に達した場合は失敗とする
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ デプロイ検証に失敗しました"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            sleep 10  # 10秒間隔で再試行
          done
          
      # 本番環境でのE2Eテスト実行
      # 外部PlaywrightリポジトリによるE2E自動テストをトリガー
      - name: 本番環境検証テスト実行
        if: steps.verify.outputs.status == 'success'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PLAYWRIGHT_REPO_TOKEN }}      # Playwrightリポジトリアクセス用トークン
          repository: richclaudfelixjp/Playwright-Project  # 外部テストリポジトリ
          event-type: cloudjp-test
          client-payload: |
            {
              "environment": "production",
              "url": "https://cloudjp.netlify.app",
              "commit_sha": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "verification_only": true,
              "triggered_by": "${{ github.actor }}"
            }
            
      # デプロイ履歴の記録
      # GitHubイシューとしてデプロイ詳細を記録し、トレーサビリティを確保
      - name: デプロイ記録作成
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ github.sha }}';
            const timestamp = new Date().toISOString();
            
            // デプロイ記録用イシューの作成
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 本番環境デプロイ - ${timestamp.split('T')[0]}`,
              body: `
            ## 本番環境デプロイ詳細
            
            **デプロイID:** ${{ steps.deploy.outputs.deploy_id }}
            **デプロイ時刻:** ${timestamp}
            **実行者:** ${{ github.actor }}
            **コミット:** ${sha}
            **URL:** https://cloudjp.netlify.app
            
            ### 検証ステータス
            - 本番検証テスト: 実行中
            
            ### 関連変更
            - ${sha}
            `,
              labels: ['deployment', 'production']  # ラベルによる分類
            });
            
      # GitHubコミットステータスの更新
      # PRやコミット画面でのデプロイ状況可視化
      - name: コミットステータス更新
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ github.sha }}';
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: 'success',
              target_url: 'https://cloudjp.netlify.app',
              description: '本番環境へのデプロイが正常完了',
              context: 'cloudjp/production-deployment'
            });
            
      # デプロイ成功の最終確認ログ
      # デプロイ完了の確認と関連情報の記録
      - name: 成功通知送信
        run: |
          echo "🎉 本番環境デプロイが正常完了!"
          echo "🌐 公開サイト: https://cloudjp.netlify.app"
          echo "📊 コミット: ${{ github.sha }}"
          echo "🔗 リポジトリ: ${{ github.repository }}"
          echo "👤 デプロイ実行者: ${{ github.actor }}"
          echo "⏰ デプロイ時刻: $(date -u)"